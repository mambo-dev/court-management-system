// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Login {
  login_id       Int        @id @unique @default(autoincrement())
  login_username String     @unique
  login_password String
  login_role     Role
  Judge          Judge?
  Citizen        Citizen?
  Police         Police?
  Lawyer         Lawyer?
  Admin          Admin?
  FeedBack       FeedBack[]
}

enum Role {
  admin
  judge
  citizen
  police
  lawyer
}

model Judge {
  judge_id           Int    @id @unique @default(autoincrement())
  judge_full_name    String
  judge_email        String @unique
  judge_gender       String
  judge_dob          String
  judge_phone_number String
  judge_national_id  String
  judge_login        Login  @relation(fields: [judge_login_id], onDelete: Cascade, references: [login_id])
  judge_login_id     Int    @unique
  Case               Case[]
}

model Citizen {
  citizen_id           Int           @id @unique @default(autoincrement())
  citizen_full_name    String
  citizen_email        String        @unique
  citizen_gender       String
  citizen_dob          String
  citizen_type         CitizenStand?
  citizen_phone_number String
  citizen_national_id  String
  citizen_login        Login         @relation(fields: [citizen_login_id], onDelete: Cascade, references: [login_id])
  citizen_login_id     Int           @unique
  plaintiff            plaintiff[]
  defendant            defendant[]
}

model FeedBack {
  feedback_id           Int          @id @unique @default(autoincrement())
  feedback_login        Login        @relation(fields: [feedback_login_id], onDelete: Cascade, references: [login_id])
  feedback_login_id     Int
  feedback_submitted_on DateTime     @default(now())
  feedback_type         FeedBackType
  feedback_details      String
}

enum FeedBackType {
  Bug
  suggestion
  compliment
  complaint
}

enum CitizenStand {
  plaintiff
  defendant
}

model Police {
  police_id           Int    @id @unique @default(autoincrement())
  police_full_name    String
  police_email        String @unique
  police_gender       String
  police_dob          String
  police_national_id  String
  police_phone_number String
  police_login        Login  @relation(fields: [police_login_id], onDelete: Cascade, references: [login_id])
  police_login_id     Int    @unique
}

model Lawyer {
  lawyer_id           Int    @id @unique @default(autoincrement())
  lawyer_full_name    String
  lawyer_email        String @unique
  lawyer_gender       String
  lawyer_dob          String
  lawyer_phone_number String
  lawyer_national_id  String
  lawyer_login        Login  @relation(fields: [lawyer_login_id], onDelete: Cascade, references: [login_id])
  lawyer_login_id     Int    @unique
  Case                Case[]
}

model Admin {
  admin_id           Int    @id @unique @default(autoincrement())
  admin_full_name    String
  admin_email        String @unique
  admin_gender       String
  admin_dob          String
  admin_phone_number String
  admin_national_id  String
  admin_login        Login  @relation(fields: [admin_login_id], onDelete: Cascade, references: [login_id])
  admin_login_id     Int    @unique
}

model Case {
  case_id           Int         @id @unique @default(autoincrement())
  case_name         String
  case_description  String
  case_status       Status
  case_hearing_date DateTime
  case_evidence     String[]
  case_lawyer       Lawyer      @relation(fields: [case_lawyer_id], onDelete: Cascade, references: [lawyer_id])
  case_lawyer_id    Int
  case_judge        Judge       @relation(fields: [case_judge_id], onDelete: Cascade, references: [judge_id])
  case_judge_id     Int
  Hearing           Hearing[]
  plaintiff         plaintiff[]
  defendant         defendant[]
}

model plaintiff {
  plaintiff_id         Int     @id @unique @default(autoincrement())
  plaintiff_citizen    Citizen @relation(fields: [plaintiff_citizen_id], onDelete: Cascade, references: [citizen_id])
  plaintiff_citizen_id Int
  plaintiff_case       Case    @relation(fields: [plaitiff_case_id], onDelete: Cascade, references: [case_id])
  plaitiff_case_id     Int
}

model defendant {
  defendant_id         Int     @id @unique @default(autoincrement())
  defendant_citizen    Citizen @relation(fields: [defendant_citizen_id], onDelete: Cascade, references: [citizen_id])
  defendant_citizen_id Int
  defendant_case       Case    @relation(fields: [defendant_case_id], onDelete: Cascade, references: [case_id])
  defendant_case_id    Int
}

model Hearing {
  hearing_id       Int           @id @unique @default(autoincrement())
  hearing_date     DateTime
  hearing_location String
  hearing_outcome  String
  hearing_status   HearingStatus
  hearing_case     Case          @relation(fields: [hearing_case_id], onDelete: Cascade, references: [case_id])
  hearing_case_id  Int
}

enum HearingStatus {
  final
  continuing
}

enum Status {
  closed
  open
}
